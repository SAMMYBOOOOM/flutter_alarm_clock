import 'package:dotted_border/dotted_border.dart';
import 'package:flutter/material.dart';
import 'package:flutter_alarm_clock_demo/data/data.dart';
import 'package:flutter_alarm_clock_demo/data/theme_data.dart';
import 'package:flutter_alarm_clock_demo/main.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

class AlarmPage extends StatefulWidget {
  @override
  State createState() {
    return _AlarmPageState();
  }
}

class _AlarmPageState extends State<AlarmPage> {

  @override
  void initState() {
    init();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 32, vertical: 64),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Text(
            "Alarm",
            style: TextStyle(
              fontFamily: 'avenir',
              fontWeight: FontWeight.w700,
              color: CustomColors.primaryTextColor,
              fontSize: 24,
            ),
          ),
          Expanded(
            child: ListView(
              children: alarms
                  .map<Widget>((alarm) {
                    return Container(
                      margin: EdgeInsets.only(bottom: 32),
                      padding: EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 8,
                      ),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: alarm.gradientColors,
                          begin: Alignment.centerLeft,
                          end: Alignment.centerRight,
                        ),
                        boxShadow: [
                          BoxShadow(
                            color: alarm.gradientColors.last.withOpacity(0.4),
                            blurRadius: 8,
                            spreadRadius: 2,
                            offset: Offset(4, 4),
                          ),
                        ],
                        borderRadius: BorderRadius.all(Radius.circular(24)),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: <Widget>[
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Row(
                                children: [
                                  Icon(
                                    Icons.label,
                                    color: Colors.white,
                                    size: 24,
                                  ),
                                  SizedBox(width: 8),
                                  Text(
                                    "Office",
                                    style: TextStyle(
                                      fontFamily: 'avenir',
                                      fontWeight: FontWeight.w500,
                                      color: Colors.white,
                                      fontSize: 16,
                                    ),
                                  ),
                                ],
                              ),
                              Switch(
                                value: true,
                                onChanged: (bool value) {},
                                activeColor: Colors.white,
                              ),
                            ],
                          ),
                          Text(
                            "Mon-Fri",
                            style: TextStyle(
                              fontFamily: 'avenir',
                              color: Colors.white,
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Text(
                                "07:00 AM",
                                style: TextStyle(
                                  fontFamily: 'avenir',
                                  color: Colors.white,
                                  fontSize: 24,
                                  fontWeight: FontWeight.w700,
                                ),
                              ),
                              Icon(
                                Icons.keyboard_arrow_down,
                                size: 36,
                                color: Colors.white,
                              ),
                            ],
                          ),
                        ],
                      ),
                    );
                  })
                  .followedBy([
                    DottedBorder(
                      options: RoundedRectDottedBorderOptions(
                        strokeWidth: 3,
                        color: CustomColors.clockOutline,
                        radius: Radius.circular(24),
                        dashPattern: [5, 4],
                      ),
                      child: Container(
                        width: double.infinity,
                        decoration: BoxDecoration(
                          color: CustomColors.clockBG,
                          borderRadius: BorderRadius.all(Radius.circular(24)),
                        ),
                        child: TextButton(
                          style: TextButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 32,
                              vertical: 16,
                            ),
                          ),
                          onPressed: () {
                            scheduleAlarm();
                          },
                          child: Column(
                            children: <Widget>[
                              Image.asset(
                                "assets/images/add_alarm.png",
                                scale: 1.5,
                              ),
                              SizedBox(height: 8),
                              Text(
                                "Add Alarm",
                                style: TextStyle(
                                  fontFamily: "avenir",
                                  color: Colors.white,
                                  fontSize: 16,
                                  fontWeight: FontWeight.w700,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ])
                  .toList(),
            ),
          ),
        ],
      ),
    );
  }


  void scheduleAlarm() async {
    // Check if we have exact alarm permission
    if (await Permission.scheduleExactAlarm.isGranted) {
      _scheduleAlarmNotification();
    } else {
      // Request the permission
      final status = await Permission.scheduleExactAlarm.request();
      if (status.isGranted) {
        _scheduleAlarmNotification();
      } else {
        // Fallback to non-exact scheduling or show error
        _scheduleNonExactAlarm();
      }
    }
  }

  void _scheduleAlarmNotification() async {
    _configureLocalTimeZone();
    tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduleNotificationTZDateTime = now.add(Duration(seconds: 3));

    var androidPlatformChannelSpecifics = AndroidNotificationDetails(
      "alarm_notification",
      "Alarm Notification",
      channelDescription: "Channel for Alarm notification",
      icon: "codex_logo",
      sound: RawResourceAndroidNotificationSound("a_long_cold_sting"),
      largeIcon: DrawableResourceAndroidBitmap("codex_logo"),
    );

    var iOSPlatformChannelSpecifics = DarwinNotificationDetails(
      sound: "a_long_code_sting.wav",
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    var platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    await flutterLocalNotificationsPlugin.initialize(initializationSettings);

    // Create notification channel
    await _createNotificationChannel();

    // Request permission
    await _requestNotificationPermission();

    await flutterLocalNotificationsPlugin.zonedSchedule(
      0,
      "Scheduled Notification",
      "This is a scheduled notification",
      scheduleNotificationTZDateTime,
      platformChannelSpecifics,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
    );
  }

  void _scheduleNonExactAlarm() async {
    _configureLocalTimeZone();
    tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduleNotificationTZDateTime = now.add(Duration(seconds: 5));

    var androidPlatformChannelSpecifics = AndroidNotificationDetails(
      "alarm_notification",
      "Alarm Notification",
      channelDescription: "Channel for Alarm notification",
      icon: "codex_logo",
      sound: RawResourceAndroidNotificationSound("a_long_cold_sting"),
      largeIcon: DrawableResourceAndroidBitmap("codex_logo"),
    );

    var iOSPlatformChannelSpecifics = DarwinNotificationDetails(
      sound: "a_long_code_sting.wav",
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    var platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    // Use non-exact scheduling
    await flutterLocalNotificationsPlugin.zonedSchedule(
      0,
      "Scheduled Notification",
      "This is a scheduled notification",
      scheduleNotificationTZDateTime,
      platformChannelSpecifics,
      androidScheduleMode: AndroidScheduleMode.inexactAllowWhileIdle, // Changed to inexact
      matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
    );
  }

  void _configureLocalTimeZone() {
    tz.initializeTimeZones();
    // For simplicity, use a fixed timezone. You can make this dynamic if needed.
    var location = tz.getLocation('Asia/Taipei');
    tz.setLocalLocation(location);
  }

  Future<void> _createNotificationChannel() async {
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'channel_id',
      'Channel Name',
      description: 'Channel Description',
      importance: Importance.max,
      enableVibration: true,
    );

    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin
    >()
        ?.createNotificationChannel(channel);
  }

  Future<void> _requestNotificationPermission() async {
    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin
    >()
        ?.requestNotificationsPermission();
  }
}
